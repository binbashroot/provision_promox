---

- name: run the vm block
  block: 

        - name: Create new VM with one network interface, three virto hard disk, 4 cores, and 2 vcpus
          community.general.proxmox_kvm:
                  agent: 'enabled=1'
                  api_host: "{{ lookup('env','PROXMOX_HOST') }}"
                  api_user: "{{ lookup('env','PROXMOX_USER') }}"
                  api_password: "{{ lookup('env','PROXMOX_PASSWORD') }}"
                  bios: "{{ virtual_machine['bios']|default('seabios') }}"
                  ciuser: "{{ cloud_init_user }}"
                  cipassword: "{{ cloud_init_pass }}"
                  cores: "{{ virtual_machine['cores'] }}"
                  cpu: "{{ cpu_type|default('host') }}"
                  hotplug: 'network,cpu,memory,disk'
                  ide:
                      ide0: "{{ cloud_init_storage|default('local-lvm:cloudinit,media=cdrom') }}"
                  ipconfig:
                      ipconfig0: "ip={{ virtual_machine['ip_with_cidr'] }},gw={{ virtual_machine['gateway'] }}"          
                  memory: "{{ virtual_machine['ram']|default('2048') }}"
                  name: "{{ virtual_machine['name'] }}.{{ domain }}"
                  net:
                      net0: "virtio,bridge=vmbr0,firewall=1{{ lookup('template','vlan.j2') }}"
                  nameservers: "{{ virtual_machine_nameservers }}"
                  node: "{{ proxmox_node }}"
                  numa_enabled: "{{ virtual_machine['numa']|default('yes') }}"
                  searchdomains: "{{ domain }}"
                  scsihw: virtio-scsi-pci
                  sshkeys: "{{ cloud_init_public_key }}"
                  tags: "{{ virtual_machine['tags']|list }}"
                  validate_certs: false
                  virtio:
                      virtio0: "{{ proxmox_storage|default('local-lvm') }}:{{ pmsize|default('2') }}"
                  vcpus: "{{ virtual_machine['vcpus']|default('1') }}"
          loop: "{{ virtual_machines }}"
          loop_control:
              loop_var: virtual_machine
          register: __proxmox_results

        # - debug:
        #     var: __proxmox_results['results']
        
        - name: Import the disk to proxmox
          ansible.builtin.shell: |
                /usr/sbin/qm importdisk {{ vmid_info['vmid'] }} {{ vmid_info['virtual_machine']['qcow_image'] }} {{ promox_storage|default('local-lvm') }}
                /usr/sbin/qm set {{ vmid_info['vmid'] }} --{{ bootdisk|default('scsi') }}0 {{ proxmox_storage|default('local-lvm') }}:vm-{{ vmid_info['vmid'] }}-disk-1
                /usr/sbin/qm set  {{ vmid_info['vmid'] }} --delete virtio0 
                /usr/sbin/qm set {{ vmid_info['vmid'] }} --delete unused0
          failed_when: false
          delegate_to: "{{ lookup('env','PROXMOX_HOST') }}"
          vars: 
              ansible_ssh_user: root    
          loop: "{{ __proxmox_results['results'] }}"
          loop_control:
              loop_var:  vmid_info
          when: __proxmox_results is changed

        - name: Update VM so it will boot from scsi0
          community.general.proxmox_kvm:
                  agent: 'enabled=1'
                  api_host: "{{ lookup('env','PROXMOX_HOST') }}"
                  api_user: "{{ lookup('env','PROXMOX_USER') }}"
                  api_password: "{{ lookup('env','PROXMOX_PASSWORD') }}"
                  boot: "{{ boot_order|default('cnd') }}"
                  bootdisk: "{{ bootdisk|default('scsi') }}0"
                  name: "{{ vmid_info['virtual_machine']['name'] }}.{{ domain }}"
                  node: "{{ proxmox_node }}"
                  vmid: "{{ vmid_info['vmid'] }}"
                  validate_certs: false
                  update: yes
          loop: "{{ __proxmox_results['results'] }}"
          loop_control:
              loop_var:  vmid_info
          when: __proxmox_results is changed

        - name: Start VM
          community.general.proxmox_kvm:
                  api_host: "{{ lookup('env','PROXMOX_HOST') }}"
                  api_user: "{{ lookup('env','PROXMOX_USER') }}"
                  api_password: "{{ lookup('env','PROXMOX_PASSWORD') }}"
                  name: "{{ vmid_info['virtual_machine']['name'] }}.{{ domain }}"
                  node: "{{ proxmox_node }}"
                  state: started
          loop: "{{ __proxmox_results['results'] }}"
          loop_control:
                loop_var: vmid_info
          when: __proxmox_results is changed

        - name: Set a fact that it is ok to register hosts if we made it this far
          ansible.builtin.set_fact:
                 register2redhat: True
          when: __proxmox_results is changed
          
  rescue: 

        - name: Delete VM
          community.general.proxmox_kvm:
                  api_host: "{{ lookup('env','PROXMOX_HOST') }}"
                  api_user: "{{ lookup('env','PROXMOX_USER') }}"
                  api_password: "{{ lookup('env','PROXMOX_PASSWORD') }}"
                  name: "{{ vmid_info['virtual_machine']['name'] }}.{{ domain }}"
                  node: "{{ proxmox_node }}"
                  state: absent
          loop: "{{ __proxmox_results['results'] }}"
          loop_control:
                loop_var: vmid_info

  tags: 
     - provision           

- name: Cleanup when needed
  block:

      - name: Unsubscribe from Red Hat subscriptions
        community.general.redhat_subscription:
              state: absent
              username: "{{ lookup('env','REDHAT_USER') }}"
              password: "{{ lookup('env','REDHAT_PASS') }}"
        loop: "{{ virtual_machines }}"
        loop_control:
            loop_var: virtual_machine
        vars: 
             ansible_user: "{{ cloud_init_user }}"
             ansible_ssh_private_key_file: "{{ cloud_init_public_key }}"
        delegate_to: "{{ (virtual_machine['ip_with_cidr']).split('/')[0]|trim }}"
        become: true
        failed_when: false
        when: 
          - clean is defined

      - name: Force stop VM
        community.general.proxmox_kvm:
                api_host: "{{ lookup('env','PROXMOX_HOST') }}"
                api_user: "{{ lookup('env','PROXMOX_USER') }}"
                api_password: "{{ lookup('env','PROXMOX_PASSWORD') }}"
                name: "{{ virtual_machine['name'] }}.{{ domain }}"
                node: "{{ proxmox_node }}"
                state: stopped
                force: yes
        loop: "{{ virtual_machines }}"
        loop_control:
            loop_var: virtual_machine
        failed_when: false

      - name: Pause for 5 seconds so VM deletion task can succeed
        ansible.builtin.pause:
            seconds: 5

      - name: Delete VM
        community.general.proxmox_kvm:
                api_host: "{{ lookup('env','PROXMOX_HOST') }}"
                api_user: "{{ lookup('env','PROXMOX_USER') }}"
                api_password: "{{ lookup('env','PROXMOX_PASSWORD') }}"
                name: "{{ virtual_machine['name'] }}.{{ domain }}"
                node: "{{ proxmox_node }}"
                state: absent
        failed_when: false
        loop: "{{ virtual_machines }}"
        loop_control:
            loop_var: virtual_machine

  tags:
    - never