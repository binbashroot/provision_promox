---

- name: Set virtual machine name to use
  ansible.builtin.set_fact:
    proxmox_vm_name: "{{ lookup('template', 'proxmox_vm_name.j2') }}"
  tags:
    - always

- name: Assert ipaddress and gateway vars are actual IP addresses
  ansible.builtin.assert:
    that:
      - ansible_host|ansible.utils.ipaddr('address')
      - ipaddress|ansible.utils.ipaddr('address')
      - gateway|ansible.utils.ipaddr('address')

- name: Assert a tag exists that matches an available qcow image
  ansible.builtin.assert:
    that:
      - tags is defined
      - tags | intersect(qcow_images | map(attribute='name'))

- name: Set image to use
  ansible.builtin.set_fact:
    image_to_use: "{{ item['qcow_file'] }}"
  loop: "{{ qcow_images }}"
  when:
    - item['name'] in tags

# - name: Verify qcow images path
#   ansible.builtin.stat:
#     path: "{{ qcow_image_path }}/{{ image_to_use }}"
#   register: __qcow_check
#   delegate_to: "{{ proxmox_node }}"
#   vars:
#     ansible_user: "{{ proxmox_username }}"
#     ansible_ssh_private_key_file: "{{ proxmox_admin_key }}"
#   run_once: true

# - name: Assert that qcow files exist on proxmox server
#   ansible.builtin.assert:
#     that:
#       - __qcow_check['stat']['exists']
#     fail_msg: "A defined qcow image is missing"

- name: "[ Block ] - Create virtual machine"
  block:

    - name: "[ Block Task ] - Create new virtual machine"
      community.general.proxmox_kvm:
        agent: "{{ 'enabled=0' if tags is defined and tags | regex_search('ubuntu') else 'enabled=1' }}"
        api_host: "{{ proxmox_api_host }}"
        api_user: "{{ proxmox_api_user }}"
        api_password: "{{ proxmox_api_pass }}"
        bios: "{{ bios | default('seabios') }}"
        ciuser: "{{ cloud_init_user }}"
        cipassword: "{{ cloud_init_pass }}"
        cores: "{{ cores | default('1') }}"
        cpu: "{{ cpu_type | default('host') }}"
        hotplug: "{{ hotplug | default('network,cpu,memory,disk') }}"
        ide:
          ide0: "{{ cloud_init_storage | default('local-lvm:cloudinit,media=cdrom') }}"
        ipconfig:
          ipconfig0: "ip={{ ipaddress }},gw={{ gateway }}"
        memory: "{{ ram | default('2048') }}"
        name: "{{ proxmox_vm_name | trim }}"
        net:
          net0: "virtio,bridge=vmbr0,firewall=1{{ lookup('template', 'vlan.j2') }}"
        nameservers: "{{ virtual_machine_nameservers }}"
        node: "{{ proxmox_node }}"
        numa_enabled: "{{ numa | default('yes') }}"
        onboot: "{{ onboot | default('no') }}"
        ostype: "{{ ostype | default('l26') }}"
        searchdomains: "{{ domain | default(omit) }}"
        scsihw: virtio-scsi-pci
        sshkeys: "{{ cloud_init_public_key }}"
        tags: "{{ tags | list }}"
        validate_certs: false
        virtio:
          virtio0: "{{ proxmox_storage | default('local-lvm') }}:{{ pmsize | default('2') }}"
        vcpus: "{{ vcpus | default('1') }}"
        vmid: "{{ vmid | default(omit) }}"
      loop: "{{ ansible_play_hosts }}"
      loop_control:
        pause: 2
      register: __proxmox_results
      delegate_to: localhost
      when: inventory_hostname == item

    - name: Delete virtio0 disk
      community.general.proxmox_disk:
        api_host: "{{ proxmox_api_host }}"
        api_user: "{{ proxmox_api_user }}"
        api_password: "{{ proxmox_api_pass }}"
        disk: virtio0
        name: "{{ proxmox_vm_name | trim }}"
        state: absent
        vmid: "{{ vmid }}"
      delegate_to: localhost
      loop: "{{ __proxmox_results['results'] }}"
      loop_control:
        pause: 1
      when:
        - __proxmox_results is changed
        - inventory_hostname in item['item']
        - item['vmid']

    - name: Add scsi0 boot disk
      community.general.proxmox_disk:
        api_host: "{{ proxmox_api_host }}"
        api_user: "{{ proxmox_api_user }}"
        api_password: "{{ proxmox_api_pass }}"
        disk: scsi0
        import_from: "{{ qcow_image_path }}/{{ image_to_use }}"
        name: "{{ proxmox_vm_name | trim }}"
        state: present
        storage: "{{ proxmox_storage|default('local-lvm') }}"
        vmid: "{{ vmid }}"
      delegate_to: localhost
      loop: "{{ __proxmox_results['results'] }}"
      loop_control:
        pause: 1
      when:
        - __proxmox_results is changed
        - inventory_hostname in item['item']
        - item['vmid']

    - name: Grow scsi0 boot disk if indicated
      community.general.proxmox_disk:
        api_host: "{{ proxmox_api_host }}"
        api_user: "{{ proxmox_api_user }}"
        api_password: "{{ proxmox_api_pass }}"
        disk: scsi0
        size: "{{ '+' + add_space | string + 'G' }}"
        state: resized
        vmid: "{{ vmid }}"
      delegate_to: localhost
      loop: "{{ __proxmox_results['results'] }}"
      loop_control:
        pause: 1
      when:
        - __proxmox_results is changed
        - inventory_hostname in item['item']
        - item['vmid']
        - add_space is defined

    - name: Add additional scsi disks if defined
      community.general.proxmox_disk:
        api_host: "{{ proxmox_api_host }}"
        api_user: "{{ proxmox_api_user }}"
        api_password: "{{ proxmox_api_pass }}"
        disk: "{{ item[1] }}"
        size: "{{ (hostvars[inventory_hostname][(item[1])]).split(':')[1] }}"
        storage: "{{ (hostvars[inventory_hostname][(item[1])]).split(':')[0] }}"
        state: present
        vmid: "{{ vmid }}"
      delegate_to: localhost
      loop: "{{ __proxmox_results['results'] | product(hostvars[inventory_hostname] | regex_findall('scsi[1-4]')) | list }}"
      loop_control:
        pause: 1
      when:
        - item[1]|length > 0
        - __proxmox_results is changed
        - inventory_hostname in item[0]['item']
        - item[0]['vmid']

    - name: "[ Block Task ] - Update virtual machine so it will boot from scsi0"
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_api_host }}"
        api_user: "{{ proxmox_api_user }}"
        api_password: "{{ proxmox_api_pass }}"
        boot: cnd
        bootdisk: "{{ bootdisk | default('scsi0') }}"
        name: "{{ proxmox_vm_name | trim }}"
        node: "{{ proxmox_node }}"
        vmid: "{{ item['vmid'] }}"
        validate_certs: false
        update: true
      delegate_to: localhost
      register: __update_status
      loop: "{{ __proxmox_results['results'] }}"
      when:
        - __proxmox_results is changed
        - inventory_hostname in item['item']
        - item['vmid']

    - name: "[ Block Task ] - Start virtual machine"
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_api_host }}"
        api_user: "{{ proxmox_api_user }}"
        api_password: "{{ proxmox_api_pass }}"
        name: "{{ proxmox_vm_name | trim }}"
        node: "{{ proxmox_node }}"
        state: started
      delegate_to: localhost
      loop: "{{ __proxmox_results['results'] }}"
      loop_control:
        pause: 1
      until: __vm_start_status is succeeded
      retries: 10
      register: __vm_start_status
      when:
        - __proxmox_results is changed
        - inventory_hostname in item['item']
        - item['vmid']

    - name: "[ Block Task ] - Wait 300 seconds for port 22 to become open and contain OpenSSH"
      ansible.builtin.wait_for:
        port: 22
        host: '{{ (ansible_ssh_host | default(ansible_host)) | default(inventory_hostname) }}'
        search_regex: OpenSSH
        delay: 20
      connection: local
  
  rescue:

    - name: "[ Block Rescue Task ] - Delete VM"
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_api_host }}"
        api_user: "{{ proxmox_api_user }}"
        api_password: "{{ proxmox_api_pass }}"
        name: "{{ proxmox_vm_name | trim }}"
        node: "{{ proxmox_node }}"
        state: absent
        force: true
      delegate_to: localhost

- name: Post provision basic tasks
  block:

    - name: "[ Block Task ] - Register RHEL hosts to Red Hat using the raw module and truncate sudo log"
      ansible.builtin.raw: |
        {{ lookup('template', 'subscribe.j2') }}
      failed_when: false
      register: foo
      vars: 
        ansible_user: rromero
        ansible_ssh_private_key_file: "{{ tower.filename.proxmox_admin_key }}"
      when:
        - __vm_start_status is defined and __vm_start_status is changed
        - redhat_user is defined
        - redhat_user|length > 0
        - redhat_pass is defined
        - redhat_pass|length > 0

    - name: "[ Block Task ] - Grab facts"
      ansible.builtin.setup:
        gather_subset: all

    - name: "[ Block Task ] - Install baseline packages"
      ansible.builtin.package:
        name: "{{ 'firewalld' if 'rhel7' in tags else 'firewalld,glibc-langpack-en' }}"
        state: present
      retries: 5
      delay: 5
      notify: 
        - firewalld gt rhel7
        - firewalld eq rhel7

    - name: "[ Block Task ] - Fix grub timeout"
      ansible.builtin.lineinfile:
        path: /etc/default/grub
        regexp: '^GRUB_TIMEOUT='
        line: 'GRUB_TIMEOUT=8'
      register: __grub_results

    - name: "[ Block Task ] - Remove console params for proxmox"
      ansible.builtin.shell: |
        grub2-mkconfig -o /boot/grub2/grub.cfg
        grubby --update-kernel=ALL --remove-args='console=tty0 console=ttyS0,115200n8'
      when: 
        - __grub_results is changed

  rescue:

    - name: "[ Block Rescue Task ] - Delete VM"
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_api_host }}"
        api_user: "{{ proxmox_api_user }}"
        api_password: "{{ proxmox_api_pass }}"
        name: "{{ proxmox_vm_name | trim }}"
        node: "{{ proxmox_node }}"
        state: absent
        force: true
      delegate_to: localhost

  become: true
  when:
    - tags is defined
    - "'rhel' in tags"
    - "'autosubscribe' in tags" 
    - "'buildtest' not in tags"

- name: Cleanup when needed
  block:

#     - name: "[ Block Clean Up Task ] - Unsubscribe from Red Hat subscriptions"
#       community.general.redhat_subscription:
#         rhsm_baseurl: 'https://satellite.example.com/rhsm'
# #       server_hostname: satellite.example.com
# #       server_insecure: true
#         state: absent
#         username: "{{ redhat_user }}"
#         password: "{{ redhat_pass }}"
# #       username: admin
# #       password: cms4u2eat
#       become: true
#       failed_when: false
#       when:
#         - clean is defined
#         - redhat_pass is defined
#         - redhat_user is defined

    - name: "[ Block Clean Up Task ] - Delete VM"
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_api_host }}"
        api_user: "{{ proxmox_api_user }}"
        api_password: "{{ proxmox_api_pass }}"
        name: "{{ proxmox_vm_name | trim }}"
        node: "{{ proxmox_node }}"
        state: absent
        force: true
      delegate_to: localhost
      loop: "{{ ansible_play_hosts }}"
      when: inventory_hostname in item
      failed_when: false

  tags:
    - never
